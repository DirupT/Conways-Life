{"version":3,"sources":["components/Canvas/Life.js","components/Canvas/LifeCanvasOptions.js","components/Canvas/LifeCanvasHeader.js","components/Canvas/LifeCanvas.js","components/App.js","index.js"],"names":["Life","width","height","Object","classCallCheck","this","cellSize","cells","cellWidth","cellHeight","x","y","push","coords","alive","buffer","name","glider","spaceship","tumbler","i","length","index","Math","ceil","cell","forEach","random","gen","step","cellsBuffer","NORTH","SOUTH","EAST","WEST","neighbors","findNeighbors","LifeCanvasOptions","props","_this","possibleConstructorReturn","getPrototypeOf","call","handleInput","event","setState","defineProperty","target","validity","valid","Number","value","generation","calculate","state","input","setSpeed","drawButtons","context","color","fillStyle","fillRect","drawGlider","refs","getContext","drawSpaceship","drawTumbler","handlePaste","setPaste","_this2","react_default","a","createElement","className","onSubmit","preventDefault","onClick","clear","randomize","start","continue","next","AutosizeInput_default","type","pattern","onChange","placeholder","String","min","max","defaultValue","style","opacity","ref","React","Component","LifeCanvasHeader","href","LifeCanvas","toggleLife","continueAnimation","rect","canvas","getBoundingClientRect","size","life","getCellSize","floor","clientX","left","clientY","top","currentGeneration","toggleCell","drawCanvas","pasteCells","paste","requestAnimationFrame","timestamp","onAnimFrame","clearCells","alert","calculateGeneration","speed","prevTimestamp","document","getElementById","options","getElementsByClassName","header","window","innerWidth","innerHeight","clientHeight","addEventListener","_this3","getCells","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","Canvas_LifeCanvasHeader","id","Canvas_LifeCanvasOptions","App","Canvas_LifeCanvas","ReactDOM","render","src_components_App"],"mappings":"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","file":"static/js/main.beb36ccb.chunk.js","sourcesContent":["class Life {\r\n    constructor(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.cellSize = 10;\r\n        this.cells = [[], []];\r\n\r\n        this.cellWidth = this.width / this.cellSize;\r\n        this.cellHeight = this.height / this.cellSize;\r\n\r\n        for (let x = 0; x < this.cellWidth; x++) {\r\n            for (let y = 0; y < this.cellHeight; y++) {\r\n                this.cells[0].push({ coords: [x, y], alive: false });\r\n                this.cells[1].push({ coords: [x, y], alive: false });\r\n            }\r\n        }\r\n\r\n        this.buffer = 0;\r\n    }\r\n\r\n    getCells() {\r\n        return this.cells[this.buffer];\r\n    }\r\n\r\n    getCellSize() {\r\n        return this.cellSize;\r\n    }\r\n\r\n    pasteCells(x, y, name) {\r\n        let cells = {\r\n            glider: [[x, y - 1], [x, y + 1], [x + 1, y], [x + 1, y + 1], [x - 1, y + 1]],\r\n            spaceship: [[x - 2, y + 1], [x - 2, y - 1], [x + 1, y + 1], [x + 2, y], [x + 2, y - 1], [x + 2, y - 2], [x + 1, y - 2], [x, y - 2], [x - 1, y - 2]],\r\n            tumbler: [[x + 1, y], [x + 1, y - 1], [x + 1, y - 2], [x + 1, y - 3], [x + 1, y - 4], [x + 2, y - 3], [x + 2, y - 4], [x + 2, y + 1], [x + 3, y],\r\n            [x + 3, y + 1], [x + 3, y - 1], [x - 1, y], [x - 1, y - 1], [x - 1, y - 2], [x - 1, y - 3], [x - 1, y - 4], [x - 2, y - 3], [x - 2, y - 4], [x - 2, y + 1],\r\n            [x - 3, y], [x - 3, y + 1], [x - 3, y - 1]]\r\n        };\r\n\r\n        for (let i = 0; i < cells[name].length; i++) {\r\n            const index = (Math.ceil(this.cellHeight) * cells[name][i][0]) + cells[name][i][1];\r\n            const cell = this.cells[this.buffer][index];\r\n            if (cell) {\r\n                cell.alive = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleCell(x, y) {\r\n        const index = (Math.ceil(this.cellHeight) * x) + y;\r\n        const cell = this.cells[this.buffer][index];\r\n        if (cell) {\r\n            cell.alive = !cell.alive;\r\n        }\r\n    }\r\n\r\n    clearCells() {\r\n        this.cells[this.buffer].forEach(cell => {\r\n            if (cell.alive) {\r\n                cell.alive = !cell.alive;\r\n            }\r\n        });\r\n    }\r\n\r\n    randomize() {\r\n        this.cells[this.buffer].forEach(cell => {\r\n            if (Math.random() >= 0.5) {\r\n                cell.alive = !cell.alive;\r\n            }\r\n        });\r\n    }\r\n\r\n    calculateGeneration(gen) {\r\n        for (let i = 0; i < gen; i++) {\r\n            this.step();\r\n        }\r\n    }\r\n\r\n    findNeighbors(x, y) {\r\n        const index = (Math.ceil(this.cellHeight) * x) + y;\r\n        const cell = this.cells[this.buffer][index];\r\n        return cell && cell.alive ? 1 : 0;\r\n    }\r\n\r\n    step() {\r\n        let cells = this.cells[this.buffer];\r\n        let cellsBuffer = this.cells[this.buffer === 0 ? 1 : 0];\r\n        let cellWidth = Math.ceil(this.cellWidth);\r\n        let cellHeight = Math.ceil(this.cellHeight);\r\n\r\n        for (let x = 0; x < cellWidth; x++) {\r\n            for (let y = 0; y < cellHeight; y++) {\r\n                let NORTH = (cellHeight + y - 1) % cellHeight;\r\n                let SOUTH = (cellHeight + y + 1) % cellHeight;\r\n\r\n                let EAST = (cellWidth + x + 1) % cellWidth;\r\n                let WEST = (cellWidth + x - 1) % cellWidth;\r\n\r\n                let neighbors =\r\n                    this.findNeighbors(EAST, NORTH) + this.findNeighbors(WEST, NORTH) +\r\n                    this.findNeighbors(EAST, SOUTH) + this.findNeighbors(WEST, SOUTH) +\r\n                    this.findNeighbors(x, SOUTH) + this.findNeighbors(x, NORTH) +\r\n                    this.findNeighbors(EAST, y) + this.findNeighbors(WEST, y);\r\n\r\n                let i = (Math.ceil(this.cellHeight) * x) + y;\r\n\r\n                if (cells[i].alive) {\r\n                    if (neighbors < 2 || neighbors > 3) {\r\n                        cellsBuffer[i].alive = false;\r\n                    } else if (neighbors === 2 || neighbors === 3) {\r\n                        cellsBuffer[i].alive = true;\r\n                    }\r\n                } else {\r\n                    if (neighbors === 3) {\r\n                        cellsBuffer[i].alive = true;\r\n                    } else {\r\n                        cellsBuffer[i].alive = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.buffer = this.buffer === 0 ? 1 : 0;\r\n    }\r\n}\r\n\r\nexport default Life;\r\n\r\n","import React from 'react';\r\nimport './canvas.css';\r\nimport AutosizeInput from 'react-input-autosize';\r\n\r\nclass LifeCanvasOptions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            input: '',\r\n            glider: false,\r\n            spaceship: false,\r\n            tumbler: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawSpaceship();\r\n        this.drawGlider();\r\n        this.drawTumbler();\r\n    }\r\n\r\n    handleInput = event => {\r\n        this.setState({ [event.target.name]: event.target.validity.valid ? Number(event.target.value) : this.props.generation });\r\n    }\r\n\r\n    calculate = () => {\r\n        this.props.calculate(this.state.input);\r\n        this.setState({ input: '' });\r\n    }\r\n\r\n    setSpeed = event => {\r\n        this.props.setSpeed(Number(event.target.value));\r\n    }\r\n\r\n    drawButtons = (context, coords, color) => {\r\n        context.fillStyle = color\r\n        coords.forEach(cell => {\r\n            context.fillRect(cell[0], cell[1], 10, 10);\r\n        });\r\n    }\r\n\r\n    drawGlider = color => {\r\n        let context = this.refs.glider.getContext(\"2d\");\r\n        let coords = [[10, 0], [20, 10], [20, 20], [10, 20], [0, 20]];\r\n        this.drawButtons(context, coords, color);\r\n    }\r\n\r\n    drawSpaceship = color => {\r\n        let context = this.refs.spaceship.getContext(\"2d\");\r\n        let coords = [[10, 0], [20, 0], [30, 0], [40, 0],\r\n        [40, 10], [40, 20], [30, 30], [0, 30], [0, 10]];\r\n        this.drawButtons(context, coords, color);\r\n    }\r\n\r\n    drawTumbler = color => {\r\n        let context = this.refs.tumbler.getContext(\"2d\");\r\n        let coords = [[10, 0], [20, 0], [40, 0], [50, 0],\r\n        [10, 10], [20, 10], [40, 10], [50, 10], [20, 20], [40, 20],\r\n        [20, 30], [40, 30], [20, 40], [40, 40], [0, 30], [60, 30],\r\n        [0, 40], [60, 40], [0, 50], [60, 50], [10, 50], [50, 50]];\r\n        this.drawButtons(context, coords, color);\r\n    }\r\n\r\n    handlePaste = name => {\r\n        if (name === 'glider' && !this.state.glider) {\r\n            this.drawGlider('yellow');\r\n            this.drawSpaceship('black');\r\n            this.drawTumbler('black');\r\n            this.setState({ glider: true, spaceship: false, tumbler: false });\r\n            this.props.setPaste(name);\r\n        } else if (name === 'spaceship' && !this.state.spaceship) {\r\n            this.drawGlider('black');\r\n            this.drawSpaceship('yellow');\r\n            this.drawTumbler('black');\r\n            this.setState({ glider: false, spaceship: true, tumbler: false });\r\n            this.props.setPaste(name);\r\n        } else if (name === 'tumbler' && !this.state.tumbler) {\r\n            this.drawGlider('black');\r\n            this.drawSpaceship('black');\r\n            this.drawTumbler('yellow');\r\n            this.setState({ glider: false, spaceship: false, tumbler: true });\r\n            this.props.setPaste(name);\r\n        } else {\r\n            this.drawGlider('black');\r\n            this.drawSpaceship('black');\r\n            this.drawTumbler('black');\r\n            this.setState({ glider: false, spaceship: false, tumbler: false });\r\n            this.props.setPaste('');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='canvas-options' onSubmit={event => event.preventDefault()} >\r\n                <i onClick={this.props.clear} className=\"fas fa-trash-alt\"></i>\r\n                <i onClick={this.props.randomize} className=\"fas fa-question\"></i>\r\n                <i onClick={this.props.start} className={this.props.continue ? \"fas fa-stop\" : \"fas fa-play\"}></i>\r\n                <i onClick={this.props.next} className=\"fas fa-arrow-right\"></i>\r\n\r\n                <form className='canvas-options-form'>\r\n                    <AutosizeInput className='canvas-options-input'\r\n                        type='text'\r\n                        pattern=\"[0-9]*\"\r\n                        name='input'\r\n                        onChange={this.handleInput}\r\n                        value={this.state.input}\r\n                        placeholder={String(this.props.generation)} />\r\n                    <input\r\n                        className='canvas-options-input-range'\r\n                        type='range'\r\n                        min=\"10\"\r\n                        max=\"1000\"\r\n                        step=\"10\"\r\n                        defaultValue=\"10\"\r\n                        onChange={this.setSpeed} />\r\n                    <input\r\n                        type='submit'\r\n                        onClick={this.calculate}\r\n                        style={{ width: \"0px\", height: \"0px\", opacity: \"0\" }} />\r\n                </form>\r\n\r\n                <canvas ref=\"glider\" onClick={() => this.handlePaste('glider')} width={30} height={30}></canvas>\r\n                <canvas ref=\"spaceship\" onClick={() => this.handlePaste('spaceship')} width={50} height={40}></canvas>\r\n                <canvas ref=\"tumbler\" onClick={() => this.handlePaste('tumbler')} width={70} height={60}></canvas>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LifeCanvasOptions;","import React from 'react';\r\n\r\nconst LifeCanvasHeader = () => {\r\n    return (\r\n        <header className='canvas-header'>\r\n            <div className='canvas-header-links'>\r\n                <a className='canvas-header-rules' href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">Rules</a>\r\n                <a className='canvas-header-about' href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">About</a>\r\n            </div>\r\n        </header >\r\n    );\r\n}\r\n\r\nexport default LifeCanvasHeader;","import React from 'react';\r\nimport Life from './Life';\r\nimport LifeCanvasOptions from './LifeCanvasOptions';\r\nimport LifeCanvasHeader from './LifeCanvasHeader';\r\n\r\nclass LifeCanvas extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentGeneration: 0,\r\n            speed: 0,\r\n            life: null,\r\n            continueAnimation: false,\r\n            prevTimestamp: null,\r\n            paste: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const canvas = document.getElementById('canvas');\r\n        const options = document.getElementsByClassName('canvas-options');\r\n        const header = document.getElementsByClassName('canvas-header');\r\n\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight - options[0].clientHeight - (header[0].clientHeight + 3);\r\n        canvas.addEventListener('mousedown', event => event.preventDefault());\r\n\r\n        this.setState({ life: new Life(canvas.width, canvas.height) });\r\n\r\n        requestAnimationFrame(timestamp => { this.onAnimFrame(timestamp); });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.setState({ continueAnimation: false });\r\n    }\r\n\r\n    onAnimFrame(timestamp) {\r\n        requestAnimationFrame(timestamp => { this.onAnimFrame(timestamp); });\r\n\r\n        timestamp = Math.floor(timestamp / (1001 - this.state.speed));\r\n\r\n        if (timestamp !== this.state.prevTimestamp) {\r\n            if (this.state.continueAnimation) {\r\n                this.setState({ currentGeneration: this.state.currentGeneration + 1 });\r\n                this.state.life.step();\r\n            }\r\n\r\n            this.setState({ prevTimestamp: timestamp });\r\n            this.drawCanvas();\r\n        }\r\n    }\r\n\r\n    drawCanvas() {\r\n        const canvas = this.refs.canvas;\r\n        const context = canvas.getContext('2d');\r\n        const cells = this.state.life.getCells();\r\n        const cellSize = this.state.life.getCellSize();\r\n\r\n        context.lineWidth = 1;\r\n        context.fillStyle = \"#7e7e7e\";\r\n        context.fillRect(0, 0, canvas.width, canvas.height);\r\n        context.strokeStyle = \"#999999\";\r\n\r\n        for (let i = 0; i < canvas.width; i += cellSize) {\r\n            context.beginPath();\r\n            context.moveTo(i + 0.5, 0);\r\n            context.lineTo(i + 0.5, canvas.height);\r\n            context.stroke();\r\n        }\r\n\r\n        for (let i = 0; i < canvas.height; i += cellSize) {\r\n            context.beginPath();\r\n            context.moveTo(0, i + 0.5);\r\n            context.lineTo(canvas.width, i + 0.5);\r\n            context.stroke();\r\n        }\r\n\r\n        context.fillStyle = \"yellow\";\r\n\r\n        cells.forEach(cell => {\r\n            if (cell.alive) {\r\n                context.fillRect(cell.coords[0] * cellSize + 1, cell.coords[1] * cellSize + 1, cellSize - 1, cellSize - 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    toggleLife = event => {\r\n        if (!this.state.continueAnimation) {\r\n            const rect = this.refs.canvas.getBoundingClientRect();\r\n            const size = this.state.life.getCellSize();\r\n\r\n            let x = Math.floor((event.clientX - rect.left) / size);\r\n            let y = Math.floor((event.clientY - rect.top) / size);\r\n\r\n            this.setState({ currentGeneration: 0 });\r\n            this.state.life.toggleCell(x, y);\r\n            this.drawCanvas();\r\n        }\r\n    }\r\n\r\n    pasteCells = event => {\r\n        const rect = this.refs.canvas.getBoundingClientRect();\r\n        const size = this.state.life.getCellSize();\r\n\r\n        let x = Math.floor((event.clientX - rect.left) / size);\r\n        let y = Math.floor((event.clientY - rect.top) / size);\r\n\r\n        this.state.life.pasteCells(x, y, this.state.paste);\r\n        this.drawCanvas();\r\n    }\r\n\r\n    setPaste = name => {\r\n        this.setState({ paste: name });\r\n    }\r\n\r\n    start = () => {\r\n        if (this.state.continueAnimation) {\r\n            this.setState({ continueAnimation: false });\r\n        } else {\r\n            this.setState({ continueAnimation: true });\r\n            requestAnimationFrame(timestamp => { this.onAnimFrame(timestamp); });\r\n        }\r\n    }\r\n\r\n    randomize = () => {\r\n        this.setState({ currentGeneration: 0 });\r\n        this.state.life.randomize();\r\n        this.drawCanvas();\r\n    }\r\n\r\n    clear = () => {\r\n        this.setState({ continueAnimation: false, currentGeneration: 0 });\r\n        this.state.life.clearCells();\r\n        this.drawCanvas();\r\n    }\r\n\r\n    next = () => {\r\n        this.setState({ currentGeneration: this.state.currentGeneration + 1 });\r\n        this.state.life.step();\r\n        this.drawCanvas();\r\n    }\r\n\r\n    calculate = gen => {\r\n        if (gen < this.state.currentGeneration) {\r\n            alert('Cannot go backwards!');\r\n        } else {\r\n            const generation = gen - this.state.currentGeneration;\r\n            this.state.life.calculateGeneration(generation);\r\n            this.drawCanvas();\r\n            this.setState({ currentGeneration: gen });\r\n        }\r\n    }\r\n\r\n    setSpeed = speed => {\r\n        this.setState({ speed });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='canvas-container'>\r\n                <LifeCanvasHeader />\r\n                <canvas onClick={this.state.paste ? this.pasteCells : this.toggleLife} id='canvas' ref=\"canvas\" />\r\n                <LifeCanvasOptions\r\n                    continue={this.state.continueAnimation}\r\n                    generation={this.state.currentGeneration}\r\n                    paste={this.state.paste}\r\n                    setPaste={this.setPaste}\r\n                    setSpeed={this.setSpeed}\r\n                    calculate={this.calculate}\r\n                    randomize={this.randomize}\r\n                    start={this.start}\r\n                    next={this.next}\r\n                    clear={this.clear}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LifeCanvas;","import React, { Component } from 'react';\nimport './App.css';\nimport LifeCanvas from './Canvas/LifeCanvas';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n\n        <LifeCanvas />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}